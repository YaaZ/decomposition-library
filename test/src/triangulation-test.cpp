#include "gtest/gtest.h"
#define DECOMPOSITION_TEST

#include "decomposition.h"

using namespace decomposition;



static std::vector<std::vector<glm::ivec3>> triangulate(std::vector<glm::dvec2>&& vertices, const std::vector<std::vector<int>>& indices) {
    std::vector<PolygonWithHolesTree> trees =
            buildPolygonAreaTrees(
                    buildPolygonTrees(vertices,
                            decomposePolygonGraph(vertices,
                                    insertSteinerVerticesForPolygons(vertices, indices))));
    std::vector<std::vector<glm::ivec3>> triangles;
    for(const decomposition::PolygonWithHoles& polygon : trees) {
        triangles.push_back(triangulatePolygonWithHoles(vertices, polygon));
    }
    return triangles;
}



TEST(Triangulation, SimpleCase) {
    std::vector<std::vector<glm::ivec3>> triangles = triangulate({
        {0, 0},
        {11, 0},
        {10, 10},
        {2, 1},
        {10, 4},
        {10, 1},
        {6, 5},
        {7, 6},
        {7, 5}
    }, {
        {0, 1, 2},
        {3, 4, 5},
        {6, 7, 8}
    });
    ASSERT_EQ(triangles.size(), 1);
    ASSERT_EQ(triangles[0].size(), 11);
}


TEST(Triangulation, RealCases) {
    {
        std::vector<std::vector<glm::ivec3>> triangles = triangulate({
            {283.0, 184.0},
            {185.0, 430.0},
            {552.0, 415.0},
            {501.0, 197.0},
            {360.0, 357.0},
            {320.0, 403.0},
            {268.0, 363.0},
            {435.0, 268.0},
            {400.36, 328.0},
            {417.0, 299.0}
        }, {
            {0, 1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        });
        ASSERT_EQ(triangles.size(), 1);
        ASSERT_EQ(triangles[0].size(), 12);
    }
    {
        std::vector<std::vector<glm::ivec3>> triangles = triangulate({
            {174.0, 129.0},
            {116.0, 433.0},
            {255.0, 444.0},
            {539.0, 130.0},

            {282.0, 324.0},
            {252.0, 399.0},
            {188.0, 354.0},

            {471.0, 339.0},
            {436.36, 399.0},
            {327.0, 344.0},
            {434.0, 282.0},

            {505.0, 408.0},
            {523.0, 363.0},
            {527.0, 317.0},
            {504.0, 247.0},
            {483.0, 199.0},
            {441.0, 187.0},
            {499.0, 161.0},
            {570.0, 370.0},

            {343.0, 212.0},
            {327.0, 303.0},
            {297.0, 410.0},
            {318.0, 164.0},
            {359.0, 157.0},
            {380.0, 248.0},

            {216.0, 242.0},
            {174.36, 323.0},
            {207.0, 153.0},
            {266.0, 237.0}
        }, {
            {0, 1, 2, 3},
            {4, 5, 6},
            {7, 8, 9, 10},
            {11, 12, 13, 14, 15, 16, 17, 18},
            {19, 20, 21, 22, 23, 24},
            {25, 26, 27, 28},
            {0, 1, 2, 3},
            {4, 5, 6},
            {7, 8, 9, 10},
            {11, 12, 13, 14, 15, 16, 17, 18},
            {19, 20, 21, 22, 23, 24},
            {25, 26, 27, 28}
        });
        // If we don't crash, then we're already good
    }
    {
        std::vector<std::vector<glm::ivec3>> triangles = triangulate({
            {174.0, 129.0},
            {116.0, 433.0},
            {608.0, 421.0},
            {539.0, 130.0},

            {282.0, 324.0},
            {252.0, 399.0},
            {188.0, 354.0},

            {471.0, 339.0},
            {436.36, 399.0},
            {327.0, 344.0},
            {434.0, 282.0},

            {505.0, 408.0},
            {602.0, 86.0},
            {527.0, 317.0},
            {504.0, 247.0},
            {483.0, 199.0},
            {441.0, 187.0},
            {499.0, 161.0},
            {570.0, 370.0},

            {343.0, 212.0},
            {327.0, 303.0},
            {297.0, 410.0},
            {318.0, 164.0},
            {359.0, 157.0},
            {380.0, 248.0},

            {216.0, 242.0},
            {174.36, 323.0},
            {207.0, 153.0},
            {266.0, 237.0},

            {174.0, 129.0},
            {116.0, 433.0},
            {608.0, 421.0},
            {539.0, 130.0},

            {282.0, 324.0},
            {252.0, 399.0},
            {188.0, 354.0},

            {471.0, 339.0},
            {436.36, 399.0},
            {327.0, 344.0},
            {434.0, 282.0},

            {505.0, 408.0},
            {523.0, 363.0},
            {527.0, 317.0},
            {504.0, 247.0},
            {483.0, 199.0},
            {441.0, 187.0},
            {499.0, 161.0},
            {570.0, 370.0},

            {343.0, 212.0},
            {327.0, 303.0},
            {297.0, 410.0},
            {318.0, 164.0},
            {359.0, 157.0},
            {380.0, 248.0},

            {216.0, 242.0},
            {174.36, 323.0},
            {207.0, 153.0},
            {266.0, 237.0}
        }, {
            {0, 1, 2, 3},
            {4, 5, 6},
            {7, 8, 9, 10},
            {11, 12, 13, 14, 15, 16, 17, 18},
            {19, 20, 21, 22, 23, 24},
            {25, 26, 27, 28},
            {29, 30, 31, 32},
            {33, 34, 35},
            {36, 37, 38, 39},
            {40, 41, 42, 43, 44, 45, 46, 47},
            {48, 49, 50, 51, 52, 52},
            {53, 54, 55, 56}
        });
    }
}